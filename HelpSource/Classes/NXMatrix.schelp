title:: NXMatrix
summary:: A matrix mixer
categories:: UGens>Multichannel

DESCRIPTION::

A matrix mixer can be thought of as a mixer with only aux sends. The output channels are represented as rows (in the matrix) and input channels are represented as columns. An input signal (column) can be routed to separated output buses (rows).

The class allocates (private) buses for input/output which are used internally in the matrix mixer. Thus the user will need to route the output buses to the sound card in order to hear the output signal(s). See example below. Keeping the buses internal (private) makes the creation of feedback networks much easier to work with.

SUBSECTION:: Control

The naming convention for controlling the amplitudes of the output sends is structured as teletype::amp_ROWNUM_COLNUM::.
For example, given that an instance of teletype::NXMatrix:: is stored in the variable teletype::m::.

teletype::m.matrix.set("amp_0_1", 0.5);:: Will send the input signal at column 1 to the output of row 0 with an amplitude of 0.5.

PRIVATE:: makeSynthDefs

CLASSMETHODS::

method:: new

argument:: numRows
The number of outputs in the matrix

argument:: numColumns
The number of inputs in the matrix

argument:: numChannels
The number of channels for the private buses

argument:: lagTime
Lag time for amp controls

argument:: server
An optional instance of link::Classes/Server::

INSTANCEMETHODS::

method:: play

Creates the matrix node

argument:: target

An optional target for the node (see link::Classes/Synth:: for possible targets)

argument:: addAction

The addAction for the node (see link::Classes/Synth:: for possible addActions)

method:: inputChannels

An array of input buses

method:: outputChannels

An array of output buses

method:: matrix

Get the instance of the matrix synth

method:: numRows

Get the number of rows

method:: numColumns

Get the number of columns

method:: numChannels

Get the number of channels for the private buses

method:: free

Frees the allocated buses and the matrix synth. They could already have been freed by CmdPeriod, so server errors might be printed (but can safely be disregarded).

method:: gui

Generates a simple gui to represent the matrix mixer. The gui is embeddable.

argument:: embed
If embed is true, no link::Classes/Window:: will be created, and the link::Classes/View:: will be returned.

EXAMPLES::

code::
(
s.waitForBoot {
    // create a 4x4 matrix mixer
    m = NXMatrix(4, 4);

    // start the matrix synth
    m.play;

    // create some input
    x = play {
        // read output from matrix mixer (feedback)
        var matrixOutputs = m.outputChannels.collect {|bus| InFeedback.ar(bus, bus.numChannels) };
        // connect a SinOsc to each matrix input, PM modulation with matrix output
        m.inputChannels.do {|bus, i|
            var sig = SinOsc.ar(rrand(220.0, 880.0), matrixOutputs[i]);
            Out.ar(bus, sig.dup);
        };
    };

    // NOTE: we won't hear any sound at this point, since all routing is internal to the matrix mixer

    // create a mixer synth which routes the output of the matrix mixer to the DAC
    SynthDef(\nx_mixer, {|amp=0.2, out|
        var o = m.outputChannels.collect {|bus| In.ar(bus, bus.numChannels) };
        Out.ar(out, amp * Limiter.ar(o.sum));
    }).add;
};
)

// start the mixer defined above
z = Synth.tail(s, \nx_mixer);

// play with some knobs
m.gui;

// don't forget to free
x.free; z.free; m.free;
::
